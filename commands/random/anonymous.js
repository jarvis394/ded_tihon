exports.run = async (api, update, args, _1, _2, _3, variables) => {
  const {
    handleError
  } = require('../../utils')
  
  const {
    randomArray
  } = require('../../utils')
  
  const {
    anonCommandCooldown
  } = require('../../config')
  
  const moment = require('moment')
  
  try {

    const { anonCommandTimeout } = variables

    async function send(peer, text, attachments) {
      await api.messages.send({
        peer_id: peer,
        message: text,
        attachment: attachments
      })
    }

    function processAttachments(attachments, peer) {
      let response = []

      attachments.forEach(async attachment => {
        /* eslint-disable indent */
        switch (attachment.type) {
          case 'photo': {
            const {
              ownerId,
              accessKey,
              id
            } = attachment
            let access = accessKey ? '_' + accessKey : ''
            response.push(`photo${ownerId}_${id}${access}`)
            break
          }

          case 'audio_message': {
            flag = true
            await update.sendAudioMessage(attachment.oggUrl, {
              peer_id: peer
            })
            break
          }
        }
        /* eslint-enable indent */
      })

      return response
    }

    let {
      peerId,
      senderId
    } = update

    if (senderId === 119528604) return update.send('üòâüòä–ü—Ä–∏–≤–µ—Ç –ü–∞–≤–ª—É –Ø–º–æ–≤—É!üëãüëã')

    const hasAttachments = update.hasAttachments()
    const hasReply = update.hasReplyMessage

    if (anonCommandTimeout.has(senderId)) {
      let time = anonCommandCooldown - Date.now() - anonCommandTimeout.get(senderId)

      return update.reply('‚ùå –ù–µ–ª—å–∑—è —Ç–∞–∫ —á–∞—Å—Ç–æ —Å–ª–∞—Ç—å —Ñ–∏–≥–Ω—é –≤ –±–µ—Å–µ–¥—ã!\n' + 
        '–û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: ' + moment(time).format('ss'))
    }

    if (args.length === 0 && !hasAttachments && !hasReply) 
      return update.send('‚ùå –ù–µ—Ç—É —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —á–µ–≥–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')

    if (args.join(' ').length > 1000) 
      return update.send('‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (>1000), –Ω–µ –∑–∞—Å–æ—Ä—è–π —á—É–∂—É—é –±–µ—Å–µ–¥—É')

    const Dialogs = await api.messages.getConversations({
      count: 200
    })
    const count = Dialogs.count
    let dialogs = Dialogs.items
    let offset = 200

    while (offset < count) {
      let offsetDialogs = await api.messages.getConversations({
        count: 200,
        offset: offset
      })

      dialogs = dialogs.concat(offsetDialogs.items)

      offset += 200
    }

    let dialog = randomArray(dialogs).conversation

    while (!dialog.can_write.allowed) {
      dialog = randomArray(dialogs).conversation
    }

    const peer = dialog.peer.id

    let attachments = []
    let flag = false
    let text = args.join(' ')

    if (hasAttachments) {
      attachments = attachments.concat(processAttachments(update.attachments, peer))
    }

    if (hasReply) {
      const {
        replyMessage
      } = update
      
      if (!text) text = replyMessage.text

      attachments = attachments.concat(processAttachments(replyMessage.attachments, peer))
    }

    if (!flag) await send(peer, text, attachments.join(','))

    update.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –¥–∏–∞–ª–æ–≥ #' + peer)

    anonCommandTimeout.set(senderId, Date.now())
    setTimeout(() => anonCommandTimeout.delete(senderId), anonCommandCooldown)

  } catch (e) {
    handleError(update, e)
  }
}

exports.command = {
  'arguments': '(message/attachment/forward)|(message/attachment/forward)',
  'description': {
    'en': 'Sends your message to a random multidialog',
    'ru': '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–Ω–¥–æ–º–Ω—É—é –±–µ—Å–µ–¥—É'
  },
  'alias': [
    'anon',
    '–∞–Ω–æ–Ω',
    '–∞–Ω–æ–Ω–∏–º—É—Å'
  ]
}