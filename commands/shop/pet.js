/* eslint-diasble */

const User = require('../../lib/User')
const { handleError } = require('../../utils')
const shopData = require('../../shopData')

const aliases = {
  buy: ['buy', '–∫—É–ø–∏—Ç—å', '–∫—É–ø–∏—Ç—Ç', '–∫—É–ø–ª—è', '–∫—É–ø–ª—á'],
  sell: ['sell', '–ø—Ä–æ–¥–∞—Ç—å', '–ø—Ä–æ–¥–∞—Ç', '–ø—Ä–æ–¥–∞—Ç–±', '–ø—Ä–æ–¥–∞–∂–∞']
}

exports.run = async (api, update, args) => {
  try {
    
    let option = args[0]
    if (!option) return sendPetsMenu()
    if (aliases.buy.includes(e => e == option)) return sendBuyMenu(option)
    if (aliases.sell.includes(e => e == option)) return sendSellMenu(option)
    
    return update.send('ü§î –¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç')
    
    async function sendPetsMenu() {
      let { senderId: id } = update
      let user = new User(id)
      await user.init()
      
      let pets = user.data.pets
      let res = [ '' ]
      
    }
    
    async function sendBuyMenu() {
      let name = await api.users.get({
        user_ids: update.senderId,
        name_case: 'gen'
      })
      let user = new User(update.senderId)

      if (!args[1]) {
        return update.send(
          'üòï –¢—ã –Ω–µ –≤–≤–µ–ª ID –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å'
        )
      }
      
      if (isNaN(args[1])) {
        return update.send(
          'üòï ID –ø—Ä–µ–¥–º–µ—Ç–∞ - —ç—Ç–æ —á–∏—Å–ª–æ, –∑–Ω–∞–µ—à—å.'
        )
      }

      await user.init()
      
      let id = parseInt(args[1])
      let item = shopData.pets.find(i => i.id === id)
      
      if (user.notEnoughFor(item.price)) {
        return update.send(
          'üßÆ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ - —É —Ç–µ–±—è ' + user.data.amount + 'T, –∞ –Ω—É–∂–Ω–æ ' + item.price + 'T'
        )
      }
      
      user.subtract(item.price)
      user.addItem(item.id)

      return update.send(
        `üéâ –¢–µ–ø–µ—Ä—å —É ${name[0].first_name} –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç ${item.name}\n` + 
        '\n  –ß—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å, –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–æ–≤–æ "–ø—Ä–æ–¥–∞—Ç—å" –∏ –Ω–æ–º–µ—Ä –≤–µ—â–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ  '
      )
    }
    
    async function sendSellMenu() {
      let name = await api.users.get({
        user_ids: update.senderId,
      })
      let user = new User(update.senderId)

      if (!args[1]) {
        return update.send(
          'üòï –¢—ã –Ω–µ –≤–≤–µ–ª –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å'
        )
      }
      
      if (isNaN(args[1])) {
        return update.send(
          'üòï –ù–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ - —ç—Ç–æ —á–∏—Å–ª–æ, –∑–Ω–∞–µ—à—å.'
        )
      }

      await user.init()
      
      let n = parseInt(args[1]) - 1
      let id = user.data.items[n]
      let item = shopData.pets.find(i => i.id === id)
      
      if (!id) {
        return update.send(
          'üßÆ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–¥ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º'
        )
      }
      
      if (!item) {
        return update.send(
          '‚ùå –£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç'
        )
      }
      
      user.add(item.price)
      user.removeItem(n)

      return update.send(
        `üéâ ${name[0].first_name} –ø—Ä–æ–¥–∞–ª –ø—Ä–µ–¥–º–µ—Ç ${item.name} –∑–∞ ${item.price}T`
      )
    }
    
  } catch (e) {
    handleError(update, e)
  }
}

exports.command = {
  'arguments': false,
  'description': {
    'en': 'Buy, sell or manage your pet',
    'ru': '–ö—É–ø–∏—Ç—å, –ø—Ä–æ–¥–∞—Ç—å, –µ–±–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ'
  },
  'alias': [
    '–∂–∏–≤–æ—Ç–Ω–æ–µ',
    '–ø–∏—Ç–æ–º–µ—Ü'
  ],
  hidden: true
}