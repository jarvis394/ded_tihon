/* eslint-disable no-unused-vars */

exports.run = async (api, update, args) => {
  const User = require('../../lib/User')
  const { handleError } = require('../../utils')
  const data = require('../../shopData')

  const aliases = {
    buy: ['buy', '–∫—É–ø–∏—Ç—å', '–∫—É–ø–∏—Ç—Ç', '–∫—É–ø–ª—è', '–∫—É–ø–ª—á'],
    sell: ['sell', '–ø—Ä–æ–¥–∞—Ç—å', '–ø—Ä–æ–¥–∞—Ç', '–ø—Ä–æ–¥–∞—Ç–±', '–ø—Ä–æ–¥–∞–∂–∞']
  }

  try {
    // If no args then will send menu
    if (!args[0]) return sendMenu()

    // Init option
    let option = args[0].toLowerCase()

    // If matches a group
    if (!isNaN(option)) {
      if (parseInt(option) <= data.groups.length && parseInt(option) >= 0)
        return sendGroup(parseInt(option))
      else return update.send('üòü –ù–µ—Ç —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã! –í–≤–µ–¥–∏ –≤–∞–ª–∏–¥–Ω—ã–π [ ID ]')
    }

    // If option is 'buy' then send buyMenu
    if (aliases.buy.includes(option)) return sendBuyMenu()

    // In any other case send error
    return update.send('üßê –û–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

    /**
     * Sends catalog menu
     */
    async function sendMenu() {
      let name = await api.users.get({
        user_ids: update.senderId
      })

      let res = [name[0].first_name + ', —Ä–∞–∑–¥–µ–ª—ã –º–∞–≥–∞–∑–∏–Ω–∞:', '']

      for (let category in data.categories) {
        res.push(
          data.categories[category].icon +
            ' ' +
            data.categories[category].name +
            ':'
        )

        for (let group of data.groups.filter(g => g.category === category)) {
          res.push(
            '‚†Ä‚†Ä' + '[ ' + group.groupId + ' ] ' + group.icon + ' ' + group.name
          )
        }

        res.push('')
      }

      res.push('')
      res.push('–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—É, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë [ ID ]:')
      res.push('@tihon_bot, –º–∞–≥–∞–∑–∏–Ω 2')

      return update.send(res.join('\n'))
    }

    /**
     * Send group menu
     * @param {string} group Group
     */
    async function sendGroup(groupId) {
      let name = await api.users.get({
        user_ids: update.senderId
      })

      let group = data.getGroupById(groupId)
      let res = [name[0].first_name + ', —Ä–∞–∑–¥–µ–ª \'' + group.name + '\':', '']

      data.items.forEach((item, i) => {
        if (item.groupId === groupId) {
          res.push(`[ ${item.id} ] ${item.icon} ${item.name} - ${item.price}T`)

          if (item.earning) {
            res.push(`‚†Ä‚†Ä‚†Ä‚†Ä- ${item.earning}T/—á–∞—Å`)
          }
        }
      })

      res.push('')
      res.push('–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ "–∫—É–ø–∏—Ç—å" –∏ [ ID ]:')
      res.push('@tihon_bot, –º–∞–≥–∞–∑–∏–Ω –∫—É–ø–∏—Ç—å 16')

      return update.send(res.join('\n'))
    }

    /**
     * Sends buying menu
     */
    async function sendBuyMenu() {
      let name = await api.users.get({
        user_ids: update.senderId,
        name_case: 'gen'
      })
      let user = new User(update.senderId)

      if (!args[1]) {
        return update.send('üòï –¢—ã –Ω–µ –≤–≤–µ–ª ID –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å')
      }

      if (isNaN(args[1])) {
        return update.send('üòï ID –ø—Ä–µ–¥–º–µ—Ç–∞ - —ç—Ç–æ —á–∏—Å–ª–æ, –∑–Ω–∞–µ—à—å.')
      }

      let id = parseInt(args[1])
      let item = data.getItemById(id)

      if (!item) return update.send('‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ')

      const { amount, state } = await user.isEnoughFor(item.price)

      if (!state) {
        return update.send(
          'üßÆ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ - —É —Ç–µ–±—è ' +
             + amount + 
            'T, –∞ –Ω—É–∂–Ω–æ ' +
            item.price +
            'T'
        )
      }
      
      const group = data.getGroupById(item.groupId)

      const addItemSuccess = await user.addItem(group, item.id)
      
      if (!addItemSuccess) return update.send(`‚ùå –í –≥—Ä—É–ø–ø–µ ${group.name} –Ω–µ–ª—å–∑—è –∏–º–µ—Ç—å –±–æ–ª—å—à–µ –≤–µ—â–µ–π, –º–∞–∫—Å–∏–º—É–º ${group.maxItems}`)
      user.subtract(item.price)
      
      return update.send(
        `üéâ –¢–µ–ø–µ—Ä—å —É ${name[0].first_name} –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç ${item.name}\n` +
          '\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É "–ø—Ä–æ–¥–∞—Ç—å", –≥—Ä—É–ø–ø—É –∏ –Ω–æ–º–µ—Ä –≤–µ—â–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ:' +
          '\n@tihon_bot, –ø—Ä–æ–¥–∞—Ç—å –¥–æ–º–∞ 1'
      )
    }

  } catch (e) {
    handleError(update, e)
  }
}

exports.command = {
  name: 'shop',
  arguments: false,
  description: {
    en: 'Go to the supermarket :p',
    ru: '–°—Ö–æ–¥–∏—Ç—å –≤ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç :p'
  },
  alias: ['—à–æ–ø', '–º–∞–≥–∞–∑–∏–Ω', '–ª–∞—Ä—ë–∫', '–ª–∞—Ä–µ–∫'],
  group: 'shop'
}
